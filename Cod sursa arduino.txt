#include <Wire.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

// GSM Module
SoftwareSerial sim(10, 11);
int _timeout;
String _buffer;
String number = "+40771554894"; // Change with your number

// GPS Module (Physical Serial)
static const int RXPin = 0, TXPin = 1; // Connect GPS TX to Arduino RX, and GPS RX to Arduino TX
static const uint32_t GPSBaud = 9600;
TinyGPSPlus gps;

const int MPU_addr = 0x68; // I2C address of the MPU-6500
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;
float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0;
boolean accident = false; // stores if an accident has occurred
boolean trigger1 = false; // stores if first trigger (lower threshold) has occurred
boolean trigger2 = false; // stores if second trigger (upper threshold) has occurred
boolean trigger3 = false; // stores if third trigger (orientation change) has occurred
byte trigger1count = 0; // stores the counts past since trigger 1 was set true
byte trigger2count = 0; // stores the counts past since trigger 2 was set true
byte trigger3count = 0; // stores the counts past since trigger 3 was set true
int angleChange = 0;
String intensity; // to store the intensity level

void setup() {
  Serial.begin(9600);
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
  pinMode(RXPin, INPUT_PULLUP); // Set RX pin as input with internal pull-up resistor
  pinMode(TXPin, OUTPUT); // Set TX pin as output
  sim.begin(9600); // Initialize GSM module
  Serial.println("System Started...");
}

void loop() {
  mpu_read();
  ax = (AcX - 2050) / 16384.00;
  ay = (AcY - 77) / 16384.00;
  az = (AcZ - 1947) / 16384.00;
  gx = (GyX + 270) / 131.07;
  gy = (GyY - 351) / 131.07;
  gz = (GyZ + 136) / 131.07;

  // calculating Amplitude vector for 3 axis
  float Raw_Amp = pow(pow(ax, 2) + pow(ay, 2) + pow(az, 2), 0.5);
  int Amp = Raw_Amp * 10;  // Multiplied by 10 because values are between 0 to 1
  Serial.print("Amplitude: ");
  Serial.println(Amp);

  intensity = getIntensity(Amp);
  Serial.print("Intensity: ");
  Serial.println(intensity);

  if (Amp <= 5 && trigger2 == false) { // Lower the lower threshold (0.5g)
    trigger1 = true;     
    Serial.println("Level 1 Trigger");   
  }   

  if (trigger1 == true) {     
    trigger1count++;     
    if (Amp >= 8) { // Lower the upper threshold (0.8g)
      trigger2 = true;
      Serial.println("Level 2 Trigger");
      trigger1 = false; 
      trigger1count = 0;
    }
  }

  if (trigger2 == true) {
    trigger2count++;
    angleChange = pow(pow(gx, 2) + pow(gy, 2) + pow(gz, 2), 0.5); 
    Serial.println(angleChange);
    if (angleChange >= 20 && angleChange <= 200) { // Lower the orientation change range (20 to 200 degrees)
      trigger3 = true; 
      trigger2 = false; 
      trigger2count = 0;       
      Serial.println("Level 3 Trigger");     
    }   
  }

  if (trigger3 == true) {     
    trigger3count++;     
    if (trigger3count >= 2) { // Reduce the count duration for the final check
      angleChange = pow(pow(gx, 2) + pow(gy, 2) + pow(gz, 2), 0.5);
      Serial.println(angleChange);
      if ((angleChange >= 0) && (angleChange <= 50)) { // Lower the range for confirming accident (0 to 5 degrees)
        accident = true; 
        trigger3 = false; 
        trigger3count = 0;         
        Serial.println("Accident Detected");       
      } else { // user regained normal orientation         
        trigger3 = false; 
        trigger3count = 0;         
        Serial.println("TRIGGER 3 DEACTIVATED");       
      }     
    }   
  }

  if (accident == true) { // in event of an Accident Detection    
    Serial.println("ACCIDENT DETECTED");
    accident = false;
    sendAccidentAlert(intensity); // Pass intensity to the alert function
  }

  if (trigger2count >= 6) { // allow 0.5s for orientation change
    trigger2 = false; 
    trigger2count = 0;
    Serial.println("TRIGGER 2 DECACTIVATED");
  }

  if (trigger1count >= 6) { // allow 0.5s for AM to break upper threshold
    trigger1 = false; 
    trigger1count = 0;
    Serial.println("TRIGGER 1 DECACTIVATED");
  }

  // Process GPS data from physical serial
  while (Serial.available() > 0) {
    gps.encode(Serial.read());
  }

  delay(100);
}

void mpu_read() {
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true); // request a total of 14 registers
  AcX = Wire.read() << 8 | Wire.read(); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
  AcY = Wire.read() << 8 | Wire.read(); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ = Wire.read() << 8 | Wire.read(); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  Tmp = Wire.read() << 8 | Wire.read(); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  GyX = Wire.read() << 8 | Wire.read(); // 0x43 (GYRO_X  GyX = Wire.read() << 8 | Wire.read(); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY = Wire.read() << 8 | Wire.read(); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ = Wire.read() << 8 | Wire.read(); // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
}

String getIntensity(int Amp) {
  if (Amp < 5) {
    return "Light";
  } else if (Amp >= 5 && Amp < 8) {
    return "Medium";
  } else if (Amp >= 8 && Amp < 12) {
    return "Dangerous";
  } else {
    return "Very Dangerous";
  }
}

void sendAccidentAlert(String intensity) {
  Serial.println("Sending Accident Alert...");
  sim.println("AT+CMGF=1");    // Sets the GSM Module in Text Mode
  delay(200);
  sim.println("AT+CMGS=\"" + number + "\"\r"); // Mobile phone number to send message
  delay(200);
  
  // Constructing the Google Maps link
  String googleMapsLink = "https://www.google.com/maps/search/?api=1&query=";
  if (gps.location.isUpdated()) {
    googleMapsLink += String(gps.location.lat(), 6) + "," + String(gps.location.lng(), 6);
  } else {
    googleMapsLink += "Location not available";
  }

  Serial.println("Generated location link: ");
  Serial.println(googleMapsLink);

  sim.println("Accident detected at the location: " + googleMapsLink + ". Accident type: " + intensity);
  delay(100);
  sim.println((char)26); // ASCII code of CTRL+Z
  delay(200);
  _buffer = _readSerial();
}

String _readSerial() {
  _timeout = 0;
  while (!sim.available() && _timeout < 12000) {
    delay(13);
    _timeout++;
  }
  if (sim.available()) {
    return sim.readString();
  }
}
